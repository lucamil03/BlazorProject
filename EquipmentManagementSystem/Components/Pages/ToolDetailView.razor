@page "/tool/{ToolId:int}"
@rendermode InteractiveServer

@using EquipmentManagementSystem.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "User,Admin")]

<PageTitle>Werkzeug</PageTitle>

<div class="d-flex justify-content-between">
    <button class="btn btn-secondary mb-3" @onclick="NavigateBack">Zurück zur Liste</button>
    <button class="btn btn-primary mb-3" @onclick="NavigateToReserve">Werkzeug reservieren<AuthorizeView Roles="Admin">/warten</AuthorizeView></button>
</div>

<h2 class="mb-2">Werkzeugdetails</h2>

@if (tool == null)
{
    <p><em>Lade Werkzeugdaten...</em></p>
}
else
{
    <div class="card mb-4 p-3 border">
        <div class="mb-2"><strong>Name:</strong> @tool.Name</div>
        <div class="mb-2"><strong>Aktueller Status:</strong> @ToolStatusHelper.GetStatusLabel(tool, reservations)</div>
        <div class="mb-2"><strong>Standort:</strong> @tool.Location</div>
        <div><strong>Beschreibung:</strong> @tool.Description</div>
    </div>
    
    <h4>Reservierungen und Wartungen</h4>
    @if (reservations.Count == 0)
    {
        <p>Keine Reservierungen oder Wartungen für dieses Werkzeug.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Startdatum</th>
                    <th>Enddatum</th>
                    <th>Typ</th>
                    <th>Mitarbeiter</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var res in reservations)
                {
                    <tr>
                        <td>@res.StartDate.ToString("dd.MM.yyyy")</td>
                        <td>@res.EndDate.ToString("dd.MM.yyyy")</td>
                        <td>@(res.Type == ReservationType.Wartung ? "Wartung" : "Reservierung")</td>
                        <td>@res.User?.FirstName @res.User?.LastName</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    [Parameter] public int ToolId { get; set; }

    private Tool? tool;
    private List<Reservation> reservations = new();

    protected override async Task OnParametersSetAsync()
    {
        tool = await DbContext.Tools.FindAsync(ToolId);

        reservations = await DbContext.Reservations
            .Where(r => r.ToolId == ToolId)
            .Include(r => r.User) 
            .OrderByDescending(r => r.StartDate)
            .ToListAsync();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/tools", true);
    }

    private void NavigateToReserve()
    {
        NavigationManager.NavigateTo($"/tool/{ToolId}/reserve", true);
    }
}