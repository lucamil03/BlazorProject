@page "/user-management"
@rendermode InteractiveServer

@using EquipmentManagementSystem.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@attribute [Authorize(Roles="Admin")]


<PageTitle>User Management</PageTitle>
<h3>User Management</h3>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Rolle</th>
            <th>Aktion</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.FirstName @user.LastName</td>
                <td>@user.Email</td>
                <td>
                    <select value="@userRoles[user.Id]" @onchange="(e) => OnRoleChanged(user.Id, e.Value?.ToString())">
                        @foreach (var role in roles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </td>
                <td><button class="btn btn-primary" @onclick="async () => await SaveRoleChange(user)">Speichern</button></td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<ApplicationUser>? users;
    private List<string> roles = ["Pending","User","Admin" ];
    private Dictionary<string, string?> userRoles = new();
    
    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            var userRole = await UserManager.GetRolesAsync(user);
            userRoles.Add(user.Id, userRole.FirstOrDefault() ?? "Pending");
        }
        Console.WriteLine("test1");

    }

    private void OnRoleChanged(string userId, string? newRole)
    {
        if (userRoles.ContainsKey(userId))
        {
            userRoles[userId] = newRole;
        }
    }


    private async Task SaveRoleChange(ApplicationUser user)
    {
        Console.WriteLine("click event gemacht");

        if (userRoles.TryGetValue(user.Id, out var newRole) && newRole != null)
        {
            var currentRoles = await UserManager.GetRolesAsync(user);
            
            if (currentRoles.Contains(newRole))
                return;
                    
            await UserManager.RemoveFromRolesAsync(user, currentRoles);
            await UserManager.AddToRoleAsync(user, newRole);
            
            NavigationManager.NavigateTo("/user-management");
        }
    }
}