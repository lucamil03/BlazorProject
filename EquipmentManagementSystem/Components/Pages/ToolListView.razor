@page "/tools"
@rendermode InteractiveServer

@using EquipmentManagementSystem.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "User,Admin")]

<PageTitle>Werkzeugliste</PageTitle>
<div class="d-flex justify-content-between mb-2">
    <h2 class="mb-2">Werkzeugliste</h2>
    <AuthorizeView Roles="Admin">
        <button class="btn btn-primary" @onclick="NavigateToCreateTool">Werkzeug anlegen</button>
    </AuthorizeView>
</div>

@if (tools is null)
{
    <p>Lade Werkzeuge...</p>
}
else if (!tools.Any())
{
    <p>Keine Werkzeuge gefunden.</p>
}
else
{
    <table class="table table-hover table-striped">
        <thead>
        <tr>
            <th>Name</th>
            <th>Aktueller Status</th>
            <th>Standort</th>
            <th>Kurzbeschreibung</th>
            <AuthorizeView Roles="Admin">
                <th>Aktion</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var tool in tools)
        {
            <tr ondblclick="@(() => NavigateToDetail(tool.Id))" style="cursor: pointer;">
                <td>@tool.Name</td>
                <td>@ToolStatusHelper.GetStatusLabel(tool, tool.Reservations.ToList())</td>
                <td>@tool.Location</td>
                <td>@tool.Description</td>
                <AuthorizeView Roles="Admin">
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteToolAsync(tool.Id)">
                            LÃ¶schen
                        </button>
                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Tool>? tools;

    protected override async Task OnInitializedAsync()
    {
        await LoadToolsAsync();
    }

    private async Task LoadToolsAsync()
    {
        tools = await DbContext.Tools
            .Include(t => t.Reservations)
            .OrderBy(t => t.Name)
            .ToListAsync();
    }

    private async Task DeleteToolAsync(int toolId)
    {
        var toolToDelete = await DbContext.Tools
            .Include(t => t.Reservations)
            .FirstOrDefaultAsync(t => t.Id == toolId);

        if (toolToDelete is not null)
        {
            DbContext.Reservations.RemoveRange(toolToDelete.Reservations);

            DbContext.Tools.Remove(toolToDelete);

            await DbContext.SaveChangesAsync();

            await LoadToolsAsync();

            StateHasChanged();
        }
    }

    private void NavigateToDetail(int toolId)
    {
        NavigationManager.NavigateTo($"/tool/{toolId}", true);
    }
    
    private void NavigateToCreateTool()
    {
        NavigationManager.NavigateTo("/tools/create", true);
    }
    
}